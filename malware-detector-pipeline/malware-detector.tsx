"use client"

import { useState } from "react"
import {
  Upload,
  FileText,
  Shield,
  Zap,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Loader2,
  Database,
  Cloud,
  Brain,
  Cpu,
  Hash,
  Activity,
  Search,
  FileSearch,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"

type AnalysisStage =
  | "idle"
  | "uploading"
  | "static-init"
  | "static-parsing"
  | "static-analysis"
  | "ml-processing"
  | "dynamic"
  | "complete"
type AnalysisResult = "clean" | "malicious" | "suspicious" | null

interface StaticAnalysisData {
  property: string
  value: string
  risk: "low" | "medium" | "high"
}

export default function MalwareDetector() {
  const [stage, setStage] = useState<AnalysisStage>("idle")
  const [progress, setProgress] = useState(0)
  const [staticResult, setStaticResult] = useState<AnalysisResult>(null)
  const [dynamicResult, setDynamicResult] = useState<AnalysisResult>(null)
  const [fileName, setFileName] = useState<string>("")
  const [staticDetails, setStaticDetails] = useState<string[]>([])
  const [dynamicDetails, setDynamicDetails] = useState<string[]>([])
  const [staticData, setStaticData] = useState<StaticAnalysisData[]>([])
  const [showMLProcessing, setShowMLProcessing] = useState(false)
  const [mlProgress, setMlProgress] = useState(0)
  const [currentStatus, setCurrentStatus] = useState("")
  const [visibleDataRows, setVisibleDataRows] = useState(0)

  const sampleFiles = ["suspicious_document.pdf", "unknown_executable.exe", "email_attachment.zip", "script_file.js"]

  const generateStaticData = (filename: string): StaticAnalysisData[] => {
    const bitcoinAddresses = [
      "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy",
      "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh",
    ]

    return [
      {
        property: "FileHash (SHA256)",
        value: "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456",
        risk: "medium",
      },
      { property: "FileSize", value: "2,847,392 bytes", risk: "low" },
      { property: "MajorOSVersion", value: "10.0", risk: "low" },
      { property: "MinorOSVersion", value: "19041", risk: "low" },
      { property: "Machine", value: "AMD64", risk: "low" },
      { property: "DebugSize", value: "0", risk: "medium" },
      { property: "DebugRVA", value: "0x00000000", risk: "medium" },
      { property: "MajorImageVersion", value: "1", risk: "low" },
      { property: "ExportRVA", value: "0x00012000", risk: "low" },
      { property: "ExportSize", value: "1,024", risk: "low" },
      { property: "IatRVA", value: "0x00015000", risk: "low" },
      { property: "MajorLinkerVersion", value: "14", risk: "low" },
      { property: "MinorLinkerVersion", value: "29", risk: "low" },
      { property: "NumberOfSections", value: "6", risk: "low" },
      { property: "SizeOfStackReserve", value: "1,048,576", risk: "low" },
      { property: "DllCharacteristics", value: "0x8160", risk: "medium" },
      { property: "ResourceSize", value: "45,312", risk: "low" },
      { property: "Entropy", value: "7.2", risk: "high" },
      { property: "Packed", value: "Yes (UPX)", risk: "high" },
      {
        property: "BitcoinAddresses",
        value: bitcoinAddresses[Math.floor(Math.random() * bitcoinAddresses.length)],
        risk: "high",
      },
      { property: "Suspicious Strings", value: "12 found", risk: "high" },
      { property: "API Calls", value: "CreateProcess, WriteFile, RegSetValue", risk: "high" },
    ]
  }

  const startAnalysis = (file: string) => {
    setFileName(file)
    setStage("uploading")
    setProgress(0)
    setStaticResult(null)
    setDynamicResult(null)
    setStaticDetails([])
    setDynamicDetails([])
    setStaticData([])
    setShowMLProcessing(false)
    setMlProgress(0)
    setCurrentStatus("Initializing analysis...")
    setVisibleDataRows(0)

    // Phase 1: Upload (3 seconds)
    setTimeout(() => {
      setCurrentStatus("Uploading file to analysis engine...")
      setProgress(5)
    }, 500)

    setTimeout(() => {
      setCurrentStatus("File uploaded successfully. Preparing for analysis...")
      setProgress(10)
    }, 2000)

    setTimeout(() => {
      setStage("static-init")
      setCurrentStatus("Initializing static analysis engine...")
      setProgress(15)
    }, 2000)

    // Phase 2: Static Analysis Initialization (2 seconds)
    setTimeout(() => {
      setCurrentStatus("Loading file into memory...")
      setProgress(20)
    }, 2000)

    setTimeout(() => {
      setStage("static-parsing")
      setCurrentStatus("Parsing file headers and structure...")
      setProgress(25)
      const data = generateStaticData(file)
      setStaticData(data)
    }, 3000)

    // Phase 3: Static Analysis - Progressive Data Loading (6 seconds)
    setTimeout(() => {
      setCurrentStatus("Extracting PE header information...")
      setProgress(30)
      setVisibleDataRows(5)
      setStaticDetails(["PE header parsing initiated..."])
    }, 3000)

    setTimeout(() => {
      setCurrentStatus("Analyzing import/export tables...")
      setProgress(35)
      setVisibleDataRows(10)
      setStaticDetails(["PE header parsing completed", "Import table extraction in progress..."])
    }, 4500)

    setTimeout(() => {
      setCurrentStatus("Performing entropy analysis...")
      setProgress(40)
      setVisibleDataRows(15)
      setStaticDetails([
        "PE header parsing completed",
        "Import table extraction completed",
        "Entropy calculation in progress...",
      ])
    }, 4000)

    setTimeout(() => {
      setCurrentStatus("Scanning for suspicious strings and patterns...")
      setProgress(45)
      setVisibleDataRows(20)
      setStaticDetails([
        "PE header parsing completed",
        "Import table extraction completed",
        "Entropy calculation completed",
        "String analysis in progress...",
      ])
    }, 5500)

    setTimeout(() => {
      setStage("static-analysis")
      setCurrentStatus("Finalizing static analysis...")
      setProgress(50)
      setVisibleDataRows(22)
      setStaticDetails([
        "PE header parsing completed",
        "Import table extraction completed",
        "Entropy calculation completed",
        "String analysis completed",
        "Suspicious patterns detected - requires ML analysis",
      ])
    }, 7000)

    // Phase 4: ML Processing (5 seconds)
    setTimeout(() => {
      setStage("ml-processing")
      setShowMLProcessing(true)
      setCurrentStatus("Feeding data to ML/AI engine...")
      setProgress(55)

      // Gradual ML progress over 5 seconds
      const mlInterval = setInterval(() => {
        setMlProgress((prev) => {
          if (prev >= 100) {
            clearInterval(mlInterval)
            return 100
          }
          return prev + 3.33 // Will reach 100 in about 30 iterations (5 seconds at 150ms intervals)
        })
      }, 150)

      // ML status updates
      setTimeout(() => setCurrentStatus("ML engine processing features..."), 9500)
      setTimeout(() => setCurrentStatus("Neural network analyzing patterns..."), 11000)
      setTimeout(() => setCurrentStatus("AI making classification decision..."), 12500)
    }, 8000)

    // Phase 5: ML Decision and Potential Dynamic Analysis (8-10 seconds)
    setTimeout(() => {
      setProgress(65)
      const needsDynamic = Math.random() > 0.3 // 70% chance needs dynamic

      if (needsDynamic) {
        setStaticResult("suspicious")
        setCurrentStatus("ML analysis indicates suspicious behavior - initiating dynamic analysis...")

        setTimeout(() => {
          setStage("dynamic")
          setCurrentStatus("Deploying file to sandbox environment...")
          setProgress(70)
        }, 12000)

        setTimeout(() => {
          setCurrentStatus("Sandbox initialization complete - executing sample...")
          setProgress(75)
          setDynamicDetails(["Sandbox environment prepared", "Sample execution initiated..."])
        }, 14000)

        setTimeout(() => {
          setCurrentStatus("Monitoring process behavior and system calls...")
          setProgress(80)
          setDynamicDetails([
            "Sandbox environment prepared",
            "Sample execution initiated",
            "Process monitoring active...",
          ])
        }, 15000)

        setTimeout(() => {
          setCurrentStatus("Analyzing network traffic and file system changes...")
          setProgress(85)
          setDynamicDetails([
            "Sandbox environment prepared",
            "Sample execution initiated",
            "Process monitoring active",
            "Network behavior analysis in progress...",
          ])
        }, 17000)

        setTimeout(() => {
          setCurrentStatus("Finalizing dynamic analysis results...")
          setProgress(95)
          const result: AnalysisResult = Math.random() > 0.5 ? "malicious" : "clean"
          setDynamicResult(result)
          setDynamicDetails([
            "Sandbox execution completed",
            "Network behavior analyzed",
            "File system changes monitored",
            "Registry modifications tracked",
            "Process injection detected",
          ])
        }, 18000)

        setTimeout(() => {
          setStage("complete")
          setCurrentStatus("Analysis complete!")
          setProgress(100)
        }, 19000)
      } else {
        // Static analysis sufficient
        setTimeout(() => {
          const result: AnalysisResult = Math.random() > 0.7 ? "clean" : "suspicious"
          setStaticResult(result)
          setCurrentStatus("Static analysis complete - no dynamic analysis required")
          setProgress(90)
        }, 8000)

        setTimeout(() => {
          setStage("complete")
          setCurrentStatus("Analysis complete!")
          setProgress(100)
        }, 21000)
      }
    }, 9000)
  }

  const resetAnalysis = () => {
    setStage("idle")
    setProgress(0)
    setStaticResult(null)
    setDynamicResult(null)
    setFileName("")
    setStaticDetails([])
    setDynamicDetails([])
    setStaticData([])
    setShowMLProcessing(false)
    setMlProgress(0)
    setCurrentStatus("")
    setVisibleDataRows(0)
  }

  const getResultColor = (result: AnalysisResult) => {
    switch (result) {
      case "clean":
        return "text-green-600"
      case "suspicious":
        return "text-yellow-600"
      case "malicious":
        return "text-red-600"
      default:
        return "text-gray-600"
    }
  }

  const getResultIcon = (result: AnalysisResult) => {
    switch (result) {
      case "clean":
        return <CheckCircle className="w-5 h-5 text-green-600" />
      case "suspicious":
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />
      case "malicious":
        return <XCircle className="w-5 h-5 text-red-600" />
      default:
        return null
    }
  }

  const getRiskColor = (risk: "low" | "medium" | "high") => {
    switch (risk) {
      case "low":
        return "text-green-600 bg-green-50"
      case "medium":
        return "text-yellow-600 bg-yellow-50"
      case "high":
        return "text-red-600 bg-red-50"
    }
  }

  const getStageIcon = () => {
    switch (stage) {
      case "uploading":
        return <Upload className="w-4 h-4 text-blue-600 animate-bounce" />
      case "static-init":
      case "static-parsing":
        return <FileSearch className="w-4 h-4 text-blue-600 animate-pulse" />
      case "static-analysis":
        return <Search className="w-4 h-4 text-blue-600 animate-spin" />
      case "ml-processing":
        return <Brain className="w-4 h-4 text-purple-600 animate-pulse" />
      case "dynamic":
        return <Zap className="w-4 h-4 text-orange-600 animate-bounce" />
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">Advanced Malware Detection Pipeline</h1>
          <p className="text-gray-600">AI-powered static and dynamic analysis with real-time visualization</p>
        </div>

        {/* File Selection */}
        {stage === "idle" && (
          <Card className="mb-8">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Upload className="w-5 h-5" />
                Select Sample File
              </CardTitle>
              <CardDescription>
                Choose a sample file to analyze through our advanced malware detection pipeline
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {sampleFiles.map((file) => (
                  <Button
                    key={file}
                    variant="outline"
                    className="h-20 flex flex-col items-center justify-center gap-2 hover:bg-blue-50 transition-colors"
                    onClick={() => startAnalysis(file)}
                  >
                    <FileText className="w-6 h-6" />
                    <span className="text-sm">{file}</span>
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Analysis Pipeline */}
        {stage !== "idle" && (
          <div className="space-y-6">
            {/* Progress Bar with Current Status */}
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    {getStageIcon()}
                    <span className="text-sm font-medium">Analysis Progress</span>
                  </div>
                  <span className="text-sm text-gray-600">{progress}%</span>
                </div>
                <Progress value={progress} className="mb-3" />
                <div className="flex items-center justify-between text-sm">
                  <p className="text-gray-600">Analyzing: {fileName}</p>
                  <p className="text-blue-600 font-medium">{currentStatus}</p>
                </div>
              </CardContent>
            </Card>

            {/* Main Analysis Grid */}
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
              {/* Static Analysis with Data Table */}
              <div className="xl:col-span-2 space-y-4">
                <Card
                  className={`transition-all duration-500 ${
                    ["static-init", "static-parsing", "static-analysis"].includes(stage)
                      ? "ring-2 ring-blue-500 shadow-lg"
                      : staticResult
                        ? "border-green-200"
                        : ""
                  }`}
                >
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Shield
                        className={`w-5 h-5 ${
                          ["static-init", "static-parsing", "static-analysis"].includes(stage)
                            ? "text-blue-600 animate-pulse"
                            : staticResult
                              ? "text-green-600"
                              : "text-gray-400"
                        }`}
                      />
                      Static Analysis
                      {["static-init", "static-parsing", "static-analysis"].includes(stage) && (
                        <Activity className="w-4 h-4 text-blue-600 animate-bounce" />
                      )}
                    </CardTitle>
                    <CardDescription>File signature, entropy, and structural analysis</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {["static-init", "static-parsing", "static-analysis"].includes(stage) && (
                      <div className="flex items-center gap-2 mb-4">
                        <Loader2 className="w-4 h-4 animate-spin text-blue-600" />
                        <span className="text-sm">{currentStatus}</span>
                      </div>
                    )}

                    {staticData.length > 0 && visibleDataRows > 0 && (
                      <div className="mb-4">
                        <div className="max-h-64 overflow-y-auto border rounded-lg">
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>Property</TableHead>
                                <TableHead>Value</TableHead>
                                <TableHead>Risk</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {staticData.slice(0, visibleDataRows).map((item, index) => (
                                <TableRow key={index} className="hover:bg-gray-50 animate-in fade-in duration-500">
                                  <TableCell className="font-medium text-sm">{item.property}</TableCell>
                                  <TableCell className="text-sm font-mono max-w-xs truncate" title={item.value}>
                                    {item.value}
                                  </TableCell>
                                  <TableCell>
                                    <Badge variant="outline" className={`text-xs ${getRiskColor(item.risk)}`}>
                                      {item.risk.toUpperCase()}
                                    </Badge>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </div>
                        {visibleDataRows < staticData.length && (
                          <div className="text-center mt-2">
                            <span className="text-xs text-gray-500">
                              Loading more data... ({visibleDataRows}/{staticData.length})
                            </span>
                          </div>
                        )}
                      </div>
                    )}

                    {staticDetails.length > 0 && (
                      <div className="space-y-1">
                        {staticDetails.map((detail, index) => (
                          <div
                            key={index}
                            className="text-xs text-gray-600 flex items-center gap-1 animate-in fade-in duration-300"
                          >
                            <div className="w-1 h-1 bg-gray-400 rounded-full" />
                            {detail}
                          </div>
                        ))}
                      </div>
                    )}

                    {staticResult && (
                      <div className="flex items-center gap-2 mt-4 animate-in fade-in duration-500">
                        {getResultIcon(staticResult)}
                        <Badge variant={staticResult === "clean" ? "default" : "secondary"}>
                          {staticResult.toUpperCase()}
                        </Badge>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* ML/AI Processing Box */}
                {showMLProcessing && (
                  <Card
                    className={`transition-all duration-500 ${stage === "ml-processing" ? "ring-2 ring-purple-500 shadow-lg" : ""}`}
                  >
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Brain className="w-5 h-5 text-purple-600 animate-pulse" />
                        <Cpu className="w-5 h-5 text-purple-600 animate-pulse" />
                        ML/AI Processing Engine
                      </CardTitle>
                      <CardDescription>Advanced machine learning analysis of extracted features</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium">Neural Network Processing</span>
                          <span className="text-sm text-gray-600">{Math.round(mlProgress)}%</span>
                        </div>
                        <Progress value={mlProgress} className="h-2" />

                        <div className="grid grid-cols-2 gap-4 text-xs">
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${mlProgress > 20 ? "bg-purple-500" : "bg-gray-300"} ${mlProgress > 20 && mlProgress < 40 ? "animate-pulse" : ""}`}
                              />
                              <span className={mlProgress > 20 ? "text-purple-700" : "text-gray-500"}>
                                Feature extraction
                              </span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${mlProgress > 40 ? "bg-purple-500" : "bg-gray-300"} ${mlProgress > 40 && mlProgress < 60 ? "animate-pulse" : ""}`}
                              />
                              <span className={mlProgress > 40 ? "text-purple-700" : "text-gray-500"}>
                                Pattern recognition
                              </span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${mlProgress > 60 ? "bg-purple-500" : "bg-gray-300"} ${mlProgress > 60 && mlProgress < 80 ? "animate-pulse" : ""}`}
                              />
                              <span className={mlProgress > 60 ? "text-purple-700" : "text-gray-500"}>
                                Behavioral modeling
                              </span>
                            </div>
                          </div>
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${mlProgress > 30 ? "bg-blue-500" : "bg-gray-300"} ${mlProgress > 30 && mlProgress < 50 ? "animate-pulse" : ""}`}
                              />
                              <span className={mlProgress > 30 ? "text-blue-700" : "text-gray-500"}>
                                Threat classification
                              </span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${mlProgress > 70 ? "bg-blue-500" : "bg-gray-300"} ${mlProgress > 70 && mlProgress < 90 ? "animate-pulse" : ""}`}
                              />
                              <span className={mlProgress > 70 ? "text-blue-700" : "text-gray-500"}>
                                Risk assessment
                              </span>
                            </div>
                            <div className="flex items-center gap-2">
                              <div
                                className={`w-2 h-2 rounded-full ${mlProgress > 90 ? "bg-blue-500" : "bg-gray-300"} ${mlProgress > 90 ? "animate-pulse" : ""}`}
                              />
                              <span className={mlProgress > 90 ? "text-blue-700" : "text-gray-500"}>
                                Decision making
                              </span>
                            </div>
                          </div>
                        </div>

                        {stage === "ml-processing" && (
                          <div className="text-center py-4">
                            <div className="inline-flex items-center gap-2 px-4 py-2 bg-purple-50 rounded-full">
                              <Hash className="w-4 h-4 text-purple-600 animate-spin" />
                              <span className="text-sm text-purple-700">Processing {visibleDataRows} features...</span>
                            </div>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>

              {/* Right Column - Dynamic Analysis and Results */}
              <div className="space-y-4">
                {/* Dynamic Analysis */}
                <Card
                  className={`transition-all duration-500 ${
                    stage === "dynamic"
                      ? "ring-2 ring-orange-500 shadow-lg"
                      : dynamicResult
                        ? "border-green-200"
                        : staticResult === "clean"
                          ? "opacity-50"
                          : ""
                  }`}
                >
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Zap
                        className={`w-5 h-5 ${
                          stage === "dynamic"
                            ? "text-orange-600 animate-pulse"
                            : dynamicResult
                              ? "text-green-600"
                              : "text-gray-400"
                        }`}
                      />
                      Dynamic Analysis
                    </CardTitle>
                    <CardDescription>Sandbox execution and behavior monitoring</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {stage === "dynamic" && (
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <Cloud className="w-4 h-4 text-orange-600 animate-bounce" />
                          <span className="text-sm">Deploying to sandbox...</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Database className="w-4 h-4 text-orange-600 animate-pulse" />
                          <span className="text-sm">Monitoring execution...</span>
                        </div>
                        <div className="bg-gray-900 text-green-400 p-2 rounded text-xs font-mono">
                          <div>$ sandbox_deploy {fileName}</div>
                          <div>{">"} Initializing virtual environment...</div>
                          <div>{">"} Executing sample...</div>
                          <div className="animate-pulse">{">"} Monitoring behavior...</div>
                        </div>
                      </div>
                    )}

                    {dynamicResult && (
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 mb-3">
                          {getResultIcon(dynamicResult)}
                          <Badge variant={dynamicResult === "clean" ? "default" : "destructive"}>
                            {dynamicResult.toUpperCase()}
                          </Badge>
                        </div>
                        <div className="space-y-1">
                          {dynamicDetails.map((detail, index) => (
                            <div
                              key={index}
                              className="text-xs text-gray-600 flex items-center gap-1 animate-in fade-in duration-300"
                            >
                              <div className="w-1 h-1 bg-gray-400 rounded-full" />
                              {detail}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {staticResult === "clean" && !dynamicResult && (
                      <div className="text-sm text-gray-500 italic">Skipped - Static analysis passed</div>
                    )}
                  </CardContent>
                </Card>

                {/* Final Results */}
                <Card
                  className={`transition-all duration-500 ${
                    stage === "complete" ? "ring-2 ring-green-500 shadow-lg" : ""
                  }`}
                >
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <CheckCircle className={`w-5 h-5 ${stage === "complete" ? "text-green-600" : "text-gray-400"}`} />
                      Final Verdict
                    </CardTitle>
                    <CardDescription>Comprehensive analysis result</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {stage === "complete" && (
                      <div className="space-y-4 animate-in fade-in duration-1000">
                        <div className="text-center">
                          <div className={`text-3xl font-bold ${getResultColor(dynamicResult || staticResult)}`}>
                            {(dynamicResult || staticResult)?.toUpperCase()}
                          </div>
                          <div className="text-sm text-gray-600 mt-1">Analysis completed</div>
                        </div>

                        <div className="space-y-2 text-xs bg-gray-50 p-3 rounded">
                          <div className="flex justify-between">
                            <span>Static Analysis:</span>
                            <span className={getResultColor(staticResult)}>{staticResult?.toUpperCase()}</span>
                          </div>
                          {dynamicResult && (
                            <div className="flex justify-between">
                              <span>Dynamic Analysis:</span>
                              <span className={getResultColor(dynamicResult)}>{dynamicResult?.toUpperCase()}</span>
                            </div>
                          )}
                          <div className="flex justify-between">
                            <span>Confidence:</span>
                            <span className="text-blue-600">{Math.floor(Math.random() * 20 + 80)}%</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Analysis Time:</span>
                            <span className="text-gray-600">{Math.floor(Math.random() * 10 + 20)}s</span>
                          </div>
                        </div>

                        <Button onClick={resetAnalysis} className="w-full" variant="outline">
                          Analyze Another File
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
