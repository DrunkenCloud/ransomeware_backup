"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  Shield,
  FileText,
  Mail,
  Download,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Eye,
  Play,
  Trophy,
  Target,
  Clock,
} from "lucide-react"

interface FileItem {
  id: string
  name: string
  type: "email" | "exe" | "pdf" | "doc" | "zip"
  size: string
  source: string
  timestamp: string
  isActuallyMalicious: boolean
  staticAnalysis?: StaticAnalysis
  dynamicAnalysis?: DynamicAnalysis
  userDecision?: "allow" | "block" | "analyze"
  status: "pending" | "static" | "dynamic" | "completed"
  staticScore?: number
  dynamicScore?: number
}

interface StaticAnalysis {
  bitcoinAddresses: string[]
  imports: string[]
  dlls: string[]
  osVersion: string
  entropy: number
  suspiciousStrings: string[]
  mlPrediction: "safe" | "suspicious" | "harmful"
  confidence: number
  packedSections: string[]
  fileSize: number
  compilationDate: string
}

interface DynamicAnalysis {
  networkConnections: string[]
  fileModifications: string[]
  registryChanges: string[]
  processesCreated: string[]
  behaviorScore: number
  memoryAllocations: string[]
  apiCalls: string[]
  dnsQueries: string[]
}

const mockFiles: FileItem[] = [
  {
    id: "1",
    name: "invoice_Q4_2024.pdf",
    type: "pdf",
    size: "2.3 MB",
    source: "email@company.com",
    timestamp: "2024-01-15 14:30:22",
    isActuallyMalicious: false,
    status: "pending",
  },
  {
    id: "2",
    name: "system_update.exe",
    type: "exe",
    size: "15.7 MB",
    source: "downloads.suspicious-site.com",
    timestamp: "2024-01-15 14:32:15",
    isActuallyMalicious: true,
    status: "pending",
  },
  {
    id: "3",
    name: "meeting_notes.doc",
    type: "doc",
    size: "1.2 MB",
    source: "colleague@company.com",
    timestamp: "2024-01-15 14:35:08",
    isActuallyMalicious: false,
    status: "pending",
  },
]

// Scoring system for static analysis
const calculateStaticScore = (analysis: StaticAnalysis): number => {
  let score = 0

  // Bitcoin addresses (high risk)
  score += analysis.bitcoinAddresses.length * 25

  // Suspicious strings
  score += analysis.suspiciousStrings.length * 15

  // High entropy (packed/encrypted)
  if (analysis.entropy > 7.5) score += 20
  else if (analysis.entropy > 6.5) score += 10

  // Risky imports
  const riskyImports = ["wininet.dll", "crypt32.dll", "ws2_32.dll", "advapi32.dll"]
  const foundRiskyImports = analysis.imports.filter((imp) => riskyImports.includes(imp))
  score += foundRiskyImports.length * 8

  // Packed sections
  score += analysis.packedSections.length * 12

  // Suspicious compilation date (very old or very new)
  const compDate = new Date(analysis.compilationDate)
  const now = new Date()
  const daysDiff = Math.abs((now.getTime() - compDate.getTime()) / (1000 * 60 * 60 * 24))
  if (daysDiff < 1 || daysDiff > 3650) score += 10

  return score
}

// Scoring system for dynamic analysis
const calculateDynamicScore = (analysis: DynamicAnalysis): number => {
  let score = 0

  // Network connections (especially to suspicious domains)
  analysis.networkConnections.forEach((conn) => {
    if (conn.includes("malicious") || conn.includes("c2") || conn.includes("bitcoin")) {
      score += 30
    } else if (conn.includes(":443") || conn.includes(":80")) {
      score += 5
    }
  })

  // Suspicious file modifications
  analysis.fileModifications.forEach((file) => {
    if (file.includes("malware") || file.includes("keylog") || file.includes("wallet") || file.includes("encrypt")) {
      score += 25
    } else if (file.includes("System32") || file.includes("AppData")) {
      score += 10
    } else {
      score += 2
    }
  })

  // Registry changes (persistence mechanisms)
  score += analysis.registryChanges.length * 20

  // Suspicious processes
  analysis.processesCreated.forEach((proc) => {
    if (proc.includes("malware") || proc.includes("keylogger") || proc.includes("miner")) {
      score += 35
    } else {
      score += 3
    }
  })

  // Memory allocations (injection techniques)
  score += analysis.memoryAllocations.length * 8

  // Suspicious API calls
  analysis.apiCalls.forEach((api) => {
    if (api.includes("CreateRemoteThread") || api.includes("WriteProcessMemory") || api.includes("VirtualAlloc")) {
      score += 15
    }
  })

  // DNS queries to suspicious domains
  analysis.dnsQueries.forEach((query) => {
    if (query.includes("malicious") || query.includes("c2") || query.includes("bitcoin")) {
      score += 20
    }
  })

  return score
}

const generateStaticAnalysis = (file: FileItem): StaticAnalysis => {
  // Generate random but realistic data
  const possibleBitcoinAddresses = [
    "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
    "3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy",
    "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh",
    "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2",
  ]

  const possibleSuspiciousStrings = [
    "keylogger",
    "bitcoin",
    "encrypt",
    "ransom",
    "backdoor",
    "payload",
    "trojan",
    "rootkit",
    "stealer",
    "miner",
    "botnet",
    "c2server",
  ]

  const standardImports = ["kernel32.dll", "user32.dll", "gdi32.dll", "comctl32.dll", "ole32.dll"]
  const riskyImports = ["wininet.dll", "crypt32.dll", "ws2_32.dll", "advapi32.dll", "ntdll.dll"]

  const possiblePackedSections = [".upx0", ".upx1", ".aspack", ".themida", ".vmprotect"]

  // Randomize the analysis data
  const bitcoinAddresses =
    Math.random() < 0.3 ? possibleBitcoinAddresses.slice(0, Math.floor(Math.random() * 3) + 1) : []

  const suspiciousStrings =
    Math.random() < 0.4 ? possibleSuspiciousStrings.slice(0, Math.floor(Math.random() * 4) + 1) : []

  const entropy = Math.random() * 10

  const imports = [
    ...standardImports.slice(0, Math.floor(Math.random() * standardImports.length) + 2),
    ...(Math.random() < 0.6 ? riskyImports.slice(0, Math.floor(Math.random() * riskyImports.length) + 1) : []),
  ]

  const packedSections = Math.random() < 0.25 ? possiblePackedSections.slice(0, Math.floor(Math.random() * 2) + 1) : []

  // Random compilation date (could be suspicious)
  const randomDate = new Date()
  if (Math.random() < 0.2) {
    // Very recent (suspicious)
    randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 2))
  } else if (Math.random() < 0.3) {
    // Very old (suspicious)
    randomDate.setFullYear(randomDate.getFullYear() - Math.floor(Math.random() * 10) - 5)
  } else {
    // Normal range
    randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 365))
  }

  const analysis: StaticAnalysis = {
    bitcoinAddresses,
    imports,
    dlls: standardImports.slice(0, Math.floor(Math.random() * 4) + 2),
    osVersion: "Windows 10/11",
    entropy,
    suspiciousStrings,
    mlPrediction: "safe", // Will be determined by score
    confidence: 0.85,
    packedSections,
    fileSize: Number.parseInt(file.size.replace(" MB", "")) * 1024 * 1024,
    compilationDate: randomDate.toISOString().split("T")[0],
  }

  return analysis
}

const generateDynamicAnalysis = (file: FileItem): DynamicAnalysis => {
  const possibleConnections = [
    "192.168.1.100:443",
    "google.com:443",
    "microsoft.com:80",
    "malicious-c2.com:8080",
    "bitcoin-pool.net:3333",
    "suspicious-domain.ru:443",
  ]

  const possibleFileModifications = [
    "C:\\Users\\Documents\\temp.pdf",
    "C:\\Users\\AppData\\Local\\Temp\\cache.tmp",
    "C:\\Users\\Documents\\encrypted.txt",
    "C:\\Windows\\System32\\malware.exe",
    "C:\\Users\\AppData\\Roaming\\wallet.dat",
    "C:\\Windows\\Temp\\keylog.txt",
  ]

  const possibleProcesses = [
    "acrobat.exe",
    "notepad.exe",
    "explorer.exe",
    "malware.exe",
    "keylogger.exe",
    "miner.exe",
    "backdoor.exe",
  ]

  const possibleApiCalls = [
    "CreateFile",
    "ReadFile",
    "WriteFile",
    "CreateRemoteThread",
    "WriteProcessMemory",
    "VirtualAlloc",
    "RegSetValue",
    "InternetConnect",
  ]

  const possibleDnsQueries = [
    "google.com",
    "microsoft.com",
    "adobe.com",
    "malicious-c2.com",
    "bitcoin-pool.net",
    "suspicious-domain.ru",
  ]

  // Randomize dynamic analysis data
  const networkConnections = []
  const connectionCount = Math.floor(Math.random() * 4)
  for (let i = 0; i < connectionCount; i++) {
    networkConnections.push(possibleConnections[Math.floor(Math.random() * possibleConnections.length)])
  }

  const fileModifications = []
  const fileModCount = Math.floor(Math.random() * 5) + 1
  for (let i = 0; i < fileModCount; i++) {
    fileModifications.push(possibleFileModifications[Math.floor(Math.random() * possibleFileModifications.length)])
  }

  const registryChanges =
    Math.random() < 0.3 ? ["HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"] : []

  const processesCreated = []
  const processCount = Math.floor(Math.random() * 3) + 1
  for (let i = 0; i < processCount; i++) {
    processesCreated.push(possibleProcesses[Math.floor(Math.random() * possibleProcesses.length)])
  }

  const memoryAllocations =
    Math.random() < 0.4 ? ["VirtualAlloc: 0x00400000 (RWX)", "VirtualProtect: 0x00401000 (RX->RWX)"] : []

  const apiCalls = []
  const apiCallCount = Math.floor(Math.random() * 6) + 3
  for (let i = 0; i < apiCallCount; i++) {
    apiCalls.push(possibleApiCalls[Math.floor(Math.random() * possibleApiCalls.length)])
  }

  const dnsQueries = []
  const dnsCount = Math.floor(Math.random() * 3)
  for (let i = 0; i < dnsCount; i++) {
    dnsQueries.push(possibleDnsQueries[Math.floor(Math.random() * possibleDnsQueries.length)])
  }

  return {
    networkConnections,
    fileModifications,
    registryChanges,
    processesCreated,
    behaviorScore: 0, // Will be calculated
    memoryAllocations,
    apiCalls,
    dnsQueries,
  }
}

export default function MalwareAnalysisSimulator() {
  const [files, setFiles] = useState<FileItem[]>(mockFiles)
  const [selectedFile, setSelectedFile] = useState<FileItem | null>(null)
  const [score, setScore] = useState(0)
  const [totalDecisions, setTotalDecisions] = useState(0)
  const [correctDecisions, setCorrectDecisions] = useState(0)
  const [staticLoading, setStaticLoading] = useState(false)
  const [dynamicLoading, setDynamicLoading] = useState(false)
  const [activeTab, setActiveTab] = useState("overview")

  // Sync selectedFile with files array updates
  useEffect(() => {
    if (selectedFile) {
      const updatedFile = files.find((f) => f.id === selectedFile.id)
      if (updatedFile) {
        setSelectedFile(updatedFile)
      }
    }
  }, [files, selectedFile])

  const getFileIcon = (type: string) => {
    switch (type) {
      case "email":
        return <Mail className="w-4 h-4" />
      case "exe":
        return <Download className="w-4 h-4" />
      case "pdf":
        return <FileText className="w-4 h-4" />
      case "doc":
        return <FileText className="w-4 h-4" />
      case "zip":
        return <Download className="w-4 h-4" />
      default:
        return <FileText className="w-4 h-4" />
    }
  }

  const getRiskBadge = (prediction: string, confidence: number) => {
    const color = prediction === "safe" ? "bg-green-500" : prediction === "suspicious" ? "bg-yellow-500" : "bg-red-500"
    return (
      <Badge className={`${color} text-white`}>
        {prediction.toUpperCase()} ({Math.round(confidence * 100)}%)
      </Badge>
    )
  }

  const performStaticAnalysis = async (fileId: string) => {
    setStaticLoading(true)
    setActiveTab("static")

    // Simulate analysis time
    await new Promise((resolve) => setTimeout(resolve, Math.random() * 1000 + 1000)) // 1-2 seconds

    setFiles((prev) =>
      prev.map((file) => {
        if (file.id === fileId) {
          const analysis = generateStaticAnalysis(file)
          const staticScore = calculateStaticScore(analysis)

          // Determine actual maliciousness based on scores
          let isActuallyMalicious = false
          if (staticScore >= 60) {
            isActuallyMalicious = true
          } else if (staticScore >= 30) {
            isActuallyMalicious = Math.random() < 0.7 // 70% chance if suspicious
          } else {
            isActuallyMalicious = Math.random() < 0.1 // 10% chance if low score
          }

          // Set ML prediction based on score
          if (staticScore >= 50) {
            analysis.mlPrediction = "harmful"
            analysis.confidence = 0.85 + Math.random() * 0.1
          } else if (staticScore >= 25) {
            analysis.mlPrediction = "suspicious"
            analysis.confidence = 0.65 + Math.random() * 0.2
          } else {
            analysis.mlPrediction = "safe"
            analysis.confidence = 0.8 + Math.random() * 0.15
          }

          const updatedFile = {
            ...file,
            staticAnalysis: analysis,
            status: "static" as const,
            staticScore,
            isActuallyMalicious,
          }
          return updatedFile
        }
        return file
      }),
    )
    setStaticLoading(false)
  }

  const performDynamicAnalysis = async (fileId: string) => {
    setDynamicLoading(true)
    setActiveTab("dynamic")

    // Simulate analysis time
    await new Promise((resolve) => setTimeout(resolve, Math.random() * 10000 + 10000)) // 10-20 seconds

    setFiles((prev) =>
      prev.map((file) => {
        if (file.id === fileId) {
          const analysis = generateDynamicAnalysis(file)
          const dynamicScore = calculateDynamicScore(analysis)

          // Update maliciousness based on combined static + dynamic scores
          const totalScore = (file.staticScore || 0) + dynamicScore
          let isActuallyMalicious = false

          if (totalScore >= 80) {
            isActuallyMalicious = true
          } else if (totalScore >= 40) {
            isActuallyMalicious = Math.random() < 0.6 // 60% chance if suspicious
          } else {
            isActuallyMalicious = Math.random() < 0.15 // 15% chance if low score
          }

          const updatedFile = {
            ...file,
            dynamicAnalysis: analysis,
            status: "dynamic" as const,
            dynamicScore,
            isActuallyMalicious,
          }
          return updatedFile
        }
        return file
      }),
    )
    setDynamicLoading(false)
  }

  const makeDecision = (fileId: string, decision: "allow" | "block") => {
    const file = files.find((f) => f.id === fileId)
    if (!file) return

    const isCorrect =
      (decision === "block" && file.isActuallyMalicious) || (decision === "allow" && !file.isActuallyMalicious)

    setFiles((prev) => prev.map((f) => (f.id === fileId ? { ...f, userDecision: decision, status: "completed" } : f)))

    setTotalDecisions((prev) => prev + 1)
    if (isCorrect) {
      setCorrectDecisions((prev) => prev + 1)
      setScore((prev) => prev + 10)
    } else {
      setScore((prev) => Math.max(0, prev - 5))
    }
  }

  const accuracy = totalDecisions > 0 ? (correctDecisions / totalDecisions) * 100 : 0

  const generateRandomFile = (): FileItem => {
    const fileTypes = ["email", "exe", "pdf", "doc", "zip"] as const
    const fileNames = [
      "invoice_2024.pdf",
      "system_update.exe",
      "meeting_notes.doc",
      "backup_data.zip",
      "newsletter.pdf",
      "software_installer.exe",
      "report_final.doc",
      "photos_vacation.zip",
      "contract_signed.pdf",
      "game_crack.exe",
      "presentation.doc",
      "archive_old.zip",
    ]
    const sources = [
      "email@company.com",
      "downloads.suspicious-site.com",
      "colleague@company.com",
      "unknown@temp-mail.com",
      "admin@corporate.net",
      "noreply@bank-security.com",
      "support@software-update.org",
    ]

    const randomType = fileTypes[Math.floor(Math.random() * fileTypes.length)]
    const randomName = fileNames[Math.floor(Math.random() * fileNames.length)]
    const randomSource = sources[Math.floor(Math.random() * sources.length)]
    const randomSize = `${(Math.random() * 20 + 0.5).toFixed(1)} MB`

    const now = new Date()
    const timestamp = now.toISOString().slice(0, 19).replace("T", " ")

    return {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      name: randomName,
      type: randomType,
      size: randomSize,
      source: randomSource,
      timestamp,
      isActuallyMalicious: false, // Will be determined by analysis
      status: "pending",
    }
  }

  const addNewFile = () => {
    const newFile = generateRandomFile()
    setFiles((prev) => [...prev, newFile])
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-6">
          <div className="flex items-center gap-3 mb-4">
            <Shield className="w-8 h-8 text-blue-600" />
            <h1 className="text-3xl font-bold">Malware Analysis Simulator</h1>
          </div>

          {/* Score Dashboard */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <Trophy className="w-5 h-5 text-yellow-500" />
                  <div>
                    <p className="text-sm text-gray-600">Score</p>
                    <p className="text-2xl font-bold">{score}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <Target className="w-5 h-5 text-green-500" />
                  <div>
                    <p className="text-sm text-gray-600">Accuracy</p>
                    <p className="text-2xl font-bold">{accuracy.toFixed(1)}%</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5 text-blue-500" />
                  <div>
                    <p className="text-sm text-gray-600">Correct</p>
                    <p className="text-2xl font-bold">{correctDecisions}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center gap-2">
                  <Clock className="w-5 h-5 text-purple-500" />
                  <div>
                    <p className="text-sm text-gray-600">Total</p>
                    <p className="text-2xl font-bold">{totalDecisions}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* File Queue */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle>Incoming Files</CardTitle>
                    <CardDescription>Files detected in network traffic</CardDescription>
                  </div>
                  <Button onClick={addNewFile} size="sm" variant="outline">
                    + New File
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {[...files]
                    .sort((a, b) => {
                      if (a.status === "completed" && b.status !== "completed") return 1
                      if (a.status !== "completed" && b.status === "completed") return -1
                      return 0
                    })
                    .map((file) => (
                      <div
                        key={file.id}
                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                          selectedFile?.id === file.id
                            ? "border-blue-500 bg-blue-50"
                            : file.status === "completed"
                              ? (() => {
                                  const isCorrect =
                                    (file.userDecision === "block" && file.isActuallyMalicious) ||
                                    (file.userDecision === "allow" && !file.isActuallyMalicious)
                                  return isCorrect ? "bg-green-100 border-green-300" : "bg-red-100 border-red-300"
                                })()
                              : "hover:bg-gray-50"
                        }`}
                        onClick={() => setSelectedFile(file)}
                      >
                        <div className="flex items-center gap-2 mb-2">
                          {getFileIcon(file.type)}
                          <span className="font-medium text-sm">{file.name}</span>
                        </div>
                        <div className="text-xs text-gray-500 space-y-1">
                          <p>Size: {file.size}</p>
                          <p>From: {file.source}</p>
                          <p>{file.timestamp}</p>
                        </div>
                        <div className="mt-2">
                          <Badge
                            variant={
                              file.status === "completed"
                                ? "default"
                                : file.status === "dynamic"
                                  ? "secondary"
                                  : file.status === "static"
                                    ? "outline"
                                    : "secondary"
                            }
                          >
                            {file.status}
                          </Badge>
                        </div>
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Analysis Panel */}
          <div className="lg:col-span-2">
            {selectedFile ? (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {getFileIcon(selectedFile.type)}
                    {selectedFile.name}
                  </CardTitle>
                  <CardDescription>Analyze this file to determine if it should be allowed or blocked</CardDescription>
                </CardHeader>
                <CardContent>
                  <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger value="overview">Overview</TabsTrigger>
                      <TabsTrigger value="static">Static Analysis</TabsTrigger>
                      <TabsTrigger value="dynamic">Dynamic Analysis</TabsTrigger>
                    </TabsList>

                    <TabsContent value="overview" className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm font-medium">File Name</p>
                          <p className="text-sm text-gray-600">{selectedFile.name}</p>
                        </div>
                        <div>
                          <p className="text-sm font-medium">File Size</p>
                          <p className="text-sm text-gray-600">{selectedFile.size}</p>
                        </div>
                        <div>
                          <p className="text-sm font-medium">Source</p>
                          <p className="text-sm text-gray-600">{selectedFile.source}</p>
                        </div>
                        <div>
                          <p className="text-sm font-medium">Timestamp</p>
                          <p className="text-sm text-gray-600">{selectedFile.timestamp}</p>
                        </div>
                      </div>

                      <div className="flex gap-2">
                        <Button
                          onClick={() => performStaticAnalysis(selectedFile.id)}
                          disabled={selectedFile.status !== "pending" || staticLoading}
                        >
                          <Eye className="w-4 h-4 mr-2" />
                          {staticLoading ? "Analyzing..." : "Static Analysis"}
                        </Button>
                        <Button
                          variant="outline"
                          onClick={() => performDynamicAnalysis(selectedFile.id)}
                          disabled={selectedFile.status === "pending" || dynamicLoading}
                        >
                          <Play className="w-4 h-4 mr-2" />
                          {dynamicLoading ? "Running Sandbox..." : "Dynamic Analysis"}
                        </Button>
                      </div>
                    </TabsContent>

                    <TabsContent value="static" className="space-y-4">
                      {staticLoading ? (
                        <div className="flex items-center justify-center p-8">
                          <div className="text-center">
                            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                            <p>Performing static analysis...</p>
                          </div>
                        </div>
                      ) : selectedFile.staticAnalysis ? (
                        <div className="space-y-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <h4 className="font-medium mb-2">Bitcoin Addresses</h4>
                              {selectedFile.staticAnalysis.bitcoinAddresses.length > 0 ? (
                                <div className="space-y-1">
                                  {selectedFile.staticAnalysis.bitcoinAddresses.map((addr, i) => (
                                    <p key={i} className="text-sm font-mono text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Cryptocurrency address found: {addr}
                                    </p>
                                  ))}
                                </div>
                              ) : (
                                <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                  ✅ No cryptocurrency addresses detected
                                </p>
                              )}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">Suspicious Strings</h4>
                              {selectedFile.staticAnalysis.suspiciousStrings.length > 0 ? (
                                <div className="space-y-1">
                                  {selectedFile.staticAnalysis.suspiciousStrings.map((str, i) => (
                                    <p key={i} className="text-sm font-mono text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Suspicious keyword: "{str}"
                                    </p>
                                  ))}
                                </div>
                              ) : (
                                <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                  ✅ No suspicious strings found
                                </p>
                              )}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">File Entropy</h4>
                              {selectedFile.staticAnalysis.entropy > 7.5 ? (
                                <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                                  ⚠️ Very high entropy ({selectedFile.staticAnalysis.entropy.toFixed(1)}/10) - likely
                                  packed/encrypted
                                </p>
                              ) : selectedFile.staticAnalysis.entropy > 6.5 ? (
                                <p className="text-sm text-yellow-600 bg-yellow-50 p-2 rounded">
                                  ⚠️ High entropy ({selectedFile.staticAnalysis.entropy.toFixed(1)}/10) - possibly packed
                                </p>
                              ) : (
                                <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                  ✅ Normal entropy ({selectedFile.staticAnalysis.entropy.toFixed(1)}/10) - not packed
                                </p>
                              )}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">Packed Sections</h4>
                              {selectedFile.staticAnalysis.packedSections.length > 0 ? (
                                <div className="space-y-1">
                                  {selectedFile.staticAnalysis.packedSections.map((section, i) => (
                                    <p key={i} className="text-sm font-mono text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Packed section detected: {section}
                                    </p>
                                  ))}
                                </div>
                              ) : (
                                <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                  ✅ No packed sections found
                                </p>
                              )}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">Compilation Date</h4>
                              {(() => {
                                const compDate = new Date(selectedFile.staticAnalysis.compilationDate)
                                const now = new Date()
                                const daysDiff = Math.abs((now.getTime() - compDate.getTime()) / (1000 * 60 * 60 * 24))

                                if (daysDiff < 1) {
                                  return (
                                    <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Very recent compilation: {selectedFile.staticAnalysis.compilationDate}
                                    </p>
                                  )
                                } else if (daysDiff > 3650) {
                                  return (
                                    <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Very old compilation: {selectedFile.staticAnalysis.compilationDate}
                                    </p>
                                  )
                                } else {
                                  return (
                                    <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                      ✅ Normal compilation date: {selectedFile.staticAnalysis.compilationDate}
                                    </p>
                                  )
                                }
                              })()}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">Imports Analysis</h4>
                              <div className="space-y-1">
                                {selectedFile.staticAnalysis.imports.includes("wininet.dll") && (
                                  <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                                    ⚠️ Network capability detected (wininet.dll)
                                  </p>
                                )}
                                {selectedFile.staticAnalysis.imports.includes("crypt32.dll") && (
                                  <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                                    ⚠️ Cryptographic functions detected
                                  </p>
                                )}
                                {selectedFile.staticAnalysis.imports.includes("ws2_32.dll") && (
                                  <p className="text-sm text-red-600 bg-red-50 p-2 rounded">
                                    ⚠️ Socket operations detected
                                  </p>
                                )}
                                {!selectedFile.staticAnalysis.imports.some((imp) =>
                                  ["wininet.dll", "crypt32.dll", "ws2_32.dll"].includes(imp),
                                ) && (
                                  <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                    ✅ Standard system imports only
                                  </p>
                                )}
                              </div>
                            </div>
                          </div>

                          <div>
                            <h4 className="font-medium mb-2">All Detected Imports</h4>
                            <div className="grid grid-cols-2 gap-2">
                              {selectedFile.staticAnalysis.imports.map((imp, i) => (
                                <span key={i} className="text-xs font-mono bg-gray-100 px-2 py-1 rounded">
                                  {imp}
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                      ) : (
                        <Alert>
                          <AlertTriangle className="h-4 w-4" />
                          <AlertDescription>
                            Run static analysis first to see detailed information about this file.
                          </AlertDescription>
                        </Alert>
                      )}
                    </TabsContent>

                    <TabsContent value="dynamic" className="space-y-4">
                      {dynamicLoading ? (
                        <div className="flex items-center justify-center p-8">
                          <div className="text-center">
                            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                            <p>Running in sandbox environment...</p>
                            <p className="text-sm text-gray-500 mt-2">This may take 10-20 seconds</p>
                          </div>
                        </div>
                      ) : selectedFile.dynamicAnalysis ? (
                        <div className="space-y-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <h4 className="font-medium mb-2">Network Activity</h4>
                              {selectedFile.dynamicAnalysis.networkConnections.length > 0 ? (
                                <div className="space-y-1">
                                  {selectedFile.dynamicAnalysis.networkConnections.map((conn, i) => {
                                    const isSuspicious =
                                      conn.includes("malicious") || conn.includes("c2") || conn.includes("bitcoin")
                                    return (
                                      <p
                                        key={i}
                                        className={`text-sm font-mono p-2 rounded ${
                                          isSuspicious ? "text-red-600 bg-red-50" : "text-green-600 bg-green-50"
                                        }`}
                                      >
                                        {isSuspicious ? "⚠️" : "ℹ️"} Connection: {conn}
                                      </p>
                                    )
                                  })}
                                </div>
                              ) : (
                                <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                  ✅ No network connections made
                                </p>
                              )}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">File System Changes</h4>
                              <div className="space-y-1">
                                {selectedFile.dynamicAnalysis.fileModifications.map((file, i) => {
                                  const isSuspicious =
                                    file.includes("malware") ||
                                    file.includes("keylog") ||
                                    file.includes("wallet") ||
                                    file.includes("encrypt")
                                  return (
                                    <p
                                      key={i}
                                      className={`text-sm font-mono p-2 rounded ${
                                        isSuspicious ? "text-red-600 bg-red-50" : "text-green-600 bg-green-50"
                                      }`}
                                    >
                                      {isSuspicious ? "⚠️" : "ℹ️"} File modified: {file}
                                    </p>
                                  )
                                })}
                              </div>
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">Registry Modifications</h4>
                              {selectedFile.dynamicAnalysis.registryChanges.length > 0 ? (
                                <div className="space-y-1">
                                  {selectedFile.dynamicAnalysis.registryChanges.map((reg, i) => (
                                    <p key={i} className="text-sm font-mono text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Registry modified: {reg}
                                    </p>
                                  ))}
                                </div>
                              ) : (
                                <p className="text-sm text-green-600 bg-green-50 p-2 rounded">
                                  ✅ No registry changes detected
                                </p>
                              )}
                            </div>

                            <div>
                              <h4 className="font-medium mb-2">Process Activity</h4>
                              <div className="space-y-1">
                                {selectedFile.dynamicAnalysis.processesCreated.map((proc, i) => {
                                  const isSuspicious =
                                    proc.includes("malware") || proc.includes("keylogger") || proc.includes("miner")
                                  return (
                                    <p
                                      key={i}
                                      className={`text-sm font-mono p-2 rounded ${
                                        isSuspicious ? "text-red-600 bg-red-50" : "text-green-600 bg-green-50"
                                      }`}
                                    >
                                      {isSuspicious ? "⚠️" : "✅"} Process started: {proc}
                                    </p>
                                  )
                                })}
                              </div>
                            </div>

                            {selectedFile.dynamicAnalysis.memoryAllocations.length > 0 && (
                              <div>
                                <h4 className="font-medium mb-2">Memory Operations</h4>
                                <div className="space-y-1">
                                  {selectedFile.dynamicAnalysis.memoryAllocations.map((mem, i) => (
                                    <p key={i} className="text-sm font-mono text-red-600 bg-red-50 p-2 rounded">
                                      ⚠️ Suspicious memory allocation: {mem}
                                    </p>
                                  ))}
                                </div>
                              </div>
                            )}

                            <div>
                              <h4 className="font-medium mb-2">API Calls</h4>
                              <div className="space-y-1">
                                {selectedFile.dynamicAnalysis.apiCalls.map((api, i) => {
                                  const isSuspicious = [
                                    "CreateRemoteThread",
                                    "WriteProcessMemory",
                                    "VirtualAlloc",
                                  ].includes(api)
                                  return (
                                    <p
                                      key={i}
                                      className={`text-sm font-mono p-2 rounded ${
                                        isSuspicious ? "text-red-600 bg-red-50" : "text-green-600 bg-green-50"
                                      }`}
                                    >
                                      {isSuspicious ? "⚠️" : "ℹ️"} API call: {api}
                                    </p>
                                  )
                                })}
                              </div>
                            </div>
                          </div>

                          {selectedFile.dynamicAnalysis.dnsQueries.length > 0 && (
                            <div>
                              <h4 className="font-medium mb-2">DNS Queries</h4>
                              <div className="space-y-1">
                                {selectedFile.dynamicAnalysis.dnsQueries.map((query, i) => {
                                  const isSuspicious =
                                    query.includes("malicious") || query.includes("c2") || query.includes("bitcoin")
                                  return (
                                    <p
                                      key={i}
                                      className={`text-sm font-mono p-2 rounded ${
                                        isSuspicious ? "text-red-600 bg-red-50" : "text-green-600 bg-green-50"
                                      }`}
                                    >
                                      {isSuspicious ? "⚠️" : "ℹ️"} DNS query: {query}
                                    </p>
                                  )
                                })}
                              </div>
                            </div>
                          )}
                        </div>
                      ) : (
                        <Alert>
                          <AlertTriangle className="h-4 w-4" />
                          <AlertDescription>Run dynamic analysis to see sandbox execution results.</AlertDescription>
                        </Alert>
                      )}
                    </TabsContent>
                  </Tabs>

                  {/* Decision Buttons */}
                  {selectedFile.status !== "pending" && selectedFile.status !== "completed" && (
                    <div className="mt-6 flex gap-2">
                      <Button
                        onClick={() => makeDecision(selectedFile.id, "allow")}
                        className="bg-green-600 hover:bg-green-700"
                      >
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Allow File
                      </Button>
                      <Button onClick={() => makeDecision(selectedFile.id, "block")} variant="destructive">
                        <XCircle className="w-4 h-4 mr-2" />
                        Block File
                      </Button>
                    </div>
                  )}

                  {selectedFile.status === "completed" && (
                    <Alert className="mt-4">
                      <CheckCircle className="h-4 w-4" />
                      <AlertDescription>
                        Decision made: <strong>{selectedFile.userDecision?.toUpperCase()}</strong>
                        {selectedFile.userDecision === "allow" && selectedFile.isActuallyMalicious && (
                          <span className="text-red-600 ml-2">❌ This was malicious!</span>
                        )}
                        {selectedFile.userDecision === "block" && !selectedFile.isActuallyMalicious && (
                          <span className="text-red-600 ml-2">❌ This was safe!</span>
                        )}
                        {((selectedFile.userDecision === "allow" && !selectedFile.isActuallyMalicious) ||
                          (selectedFile.userDecision === "block" && selectedFile.isActuallyMalicious)) && (
                          <span className="text-green-600 ml-2">✅ Correct decision!</span>
                        )}
                      </AlertDescription>
                    </Alert>
                  )}
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardContent className="p-8 text-center">
                  <Shield className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-semibold mb-2">Select a File to Analyze</h3>
                  <p className="text-gray-600">Choose a file from the queue to begin your security analysis.</p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
